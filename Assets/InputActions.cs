//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Actions"",
            ""id"": ""50389d7b-d795-49bf-96da-98581e190656"",
            ""actions"": [
                {
                    ""name"": ""ShootLeft"",
                    ""type"": ""Button"",
                    ""id"": ""198ab929-0aca-47b5-9273-6e05389f3eb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootRight"",
                    ""type"": ""Button"",
                    ""id"": ""eb6353a5-f85b-456d-8eec-215668a4062f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AimLeft"",
                    ""type"": ""Value"",
                    ""id"": ""7802090c-aa07-4132-9dd1-ab14665f1462"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AimRight"",
                    ""type"": ""Value"",
                    ""id"": ""99c151e1-a77b-4c6f-ba0c-295588202633"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TenseLeft"",
                    ""type"": ""Value"",
                    ""id"": ""f9e2f269-7607-4f2d-bc75-534419939a4f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TenseRight"",
                    ""type"": ""Value"",
                    ""id"": ""e896677a-cae5-4eab-ac85-bd4087399c4b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Clamp(min=0.01,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""5e7bb83a-982e-443e-9710-c9de834fc8a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""f6ec2f8f-ae0d-415a-94c9-6d6520f8ebbd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Accept"",
                    ""type"": ""Button"",
                    ""id"": ""06a24ab9-5358-4549-9206-d36a46d777e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bd1adf7c-36d5-493c-9eff-b502ffcbe7ef"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""817f806c-ce45-434f-9059-40c7935c9939"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9b6c3a8-2e6a-4d43-9810-449379cafd0b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad24b493-4a65-4138-815f-e6f5e98e7669"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2ec86fe-1259-4707-a938-a6f4ff51284a"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TenseLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a20b681f-883a-4a0b-b854-4acb0940c8eb"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TenseRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7534a42b-a6aa-4d06-b876-e5cc925006d7"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40a4a846-0e18-4a1a-be8c-085ac85ceea1"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d91d591-bcfa-4f12-9d6f-cf25ebb60e59"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accept"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Actions
        m_Actions = asset.FindActionMap("Actions", throwIfNotFound: true);
        m_Actions_ShootLeft = m_Actions.FindAction("ShootLeft", throwIfNotFound: true);
        m_Actions_ShootRight = m_Actions.FindAction("ShootRight", throwIfNotFound: true);
        m_Actions_AimLeft = m_Actions.FindAction("AimLeft", throwIfNotFound: true);
        m_Actions_AimRight = m_Actions.FindAction("AimRight", throwIfNotFound: true);
        m_Actions_TenseLeft = m_Actions.FindAction("TenseLeft", throwIfNotFound: true);
        m_Actions_TenseRight = m_Actions.FindAction("TenseRight", throwIfNotFound: true);
        m_Actions_Pause = m_Actions.FindAction("Pause", throwIfNotFound: true);
        m_Actions_Restart = m_Actions.FindAction("Restart", throwIfNotFound: true);
        m_Actions_Accept = m_Actions.FindAction("Accept", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Actions
    private readonly InputActionMap m_Actions;
    private IActionsActions m_ActionsActionsCallbackInterface;
    private readonly InputAction m_Actions_ShootLeft;
    private readonly InputAction m_Actions_ShootRight;
    private readonly InputAction m_Actions_AimLeft;
    private readonly InputAction m_Actions_AimRight;
    private readonly InputAction m_Actions_TenseLeft;
    private readonly InputAction m_Actions_TenseRight;
    private readonly InputAction m_Actions_Pause;
    private readonly InputAction m_Actions_Restart;
    private readonly InputAction m_Actions_Accept;
    public struct ActionsActions
    {
        private @InputActions m_Wrapper;
        public ActionsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShootLeft => m_Wrapper.m_Actions_ShootLeft;
        public InputAction @ShootRight => m_Wrapper.m_Actions_ShootRight;
        public InputAction @AimLeft => m_Wrapper.m_Actions_AimLeft;
        public InputAction @AimRight => m_Wrapper.m_Actions_AimRight;
        public InputAction @TenseLeft => m_Wrapper.m_Actions_TenseLeft;
        public InputAction @TenseRight => m_Wrapper.m_Actions_TenseRight;
        public InputAction @Pause => m_Wrapper.m_Actions_Pause;
        public InputAction @Restart => m_Wrapper.m_Actions_Restart;
        public InputAction @Accept => m_Wrapper.m_Actions_Accept;
        public InputActionMap Get() { return m_Wrapper.m_Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        public void SetCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterface != null)
            {
                @ShootLeft.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnShootLeft;
                @ShootLeft.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnShootLeft;
                @ShootLeft.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnShootLeft;
                @ShootRight.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnShootRight;
                @ShootRight.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnShootRight;
                @ShootRight.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnShootRight;
                @AimLeft.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnAimLeft;
                @AimLeft.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnAimLeft;
                @AimLeft.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnAimLeft;
                @AimRight.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnAimRight;
                @AimRight.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnAimRight;
                @AimRight.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnAimRight;
                @TenseLeft.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTenseLeft;
                @TenseLeft.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTenseLeft;
                @TenseLeft.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTenseLeft;
                @TenseRight.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTenseRight;
                @TenseRight.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTenseRight;
                @TenseRight.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTenseRight;
                @Pause.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnPause;
                @Restart.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRestart;
                @Accept.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnAccept;
                @Accept.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnAccept;
                @Accept.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnAccept;
            }
            m_Wrapper.m_ActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ShootLeft.started += instance.OnShootLeft;
                @ShootLeft.performed += instance.OnShootLeft;
                @ShootLeft.canceled += instance.OnShootLeft;
                @ShootRight.started += instance.OnShootRight;
                @ShootRight.performed += instance.OnShootRight;
                @ShootRight.canceled += instance.OnShootRight;
                @AimLeft.started += instance.OnAimLeft;
                @AimLeft.performed += instance.OnAimLeft;
                @AimLeft.canceled += instance.OnAimLeft;
                @AimRight.started += instance.OnAimRight;
                @AimRight.performed += instance.OnAimRight;
                @AimRight.canceled += instance.OnAimRight;
                @TenseLeft.started += instance.OnTenseLeft;
                @TenseLeft.performed += instance.OnTenseLeft;
                @TenseLeft.canceled += instance.OnTenseLeft;
                @TenseRight.started += instance.OnTenseRight;
                @TenseRight.performed += instance.OnTenseRight;
                @TenseRight.canceled += instance.OnTenseRight;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
                @Accept.started += instance.OnAccept;
                @Accept.performed += instance.OnAccept;
                @Accept.canceled += instance.OnAccept;
            }
        }
    }
    public ActionsActions @Actions => new ActionsActions(this);
    public interface IActionsActions
    {
        void OnShootLeft(InputAction.CallbackContext context);
        void OnShootRight(InputAction.CallbackContext context);
        void OnAimLeft(InputAction.CallbackContext context);
        void OnAimRight(InputAction.CallbackContext context);
        void OnTenseLeft(InputAction.CallbackContext context);
        void OnTenseRight(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnAccept(InputAction.CallbackContext context);
    }
}
